{"version":3,"sources":["Graph.js","App.js","index.js"],"names":["Chart","require","Graph","val","console","log","time","actual","data","predicted","chartColors","color","helpers","datasets","label","backgroundColor","alpha","rgbString","borderColor","fill","lineTension","borderDash","options","tooltips","callbacks","tooltipItem","index","yLabel","elements","line","tension","scales","xAxes","type","ticks","min","minT","max","maxT","minUnit","stepSize","className","App","API","useState","stockPrice","setStockPrice","name","setName","filterTheData","len","processed","num","i","push","x","y","slice","Math","length","useEffect","populateData2","fetch","then","res","json","result","p","a","pop","catch","interval","setInterval","clearInterval","populateData","map","stockName","key","onClick","e","target","value","toLowerCase","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.38cb4819.chunk.js","sourcesContent":["import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport \"chartjs-plugin-streaming\";\nimport \"./style.css\";\n\nconst Chart = require(\"react-chartjs-2\").Chart;\nfunction Graph(val) {\nconst getValues=(data)=>{\n    let l=[]\n    for(var i in data){\n        l.push(data[i])\n    }\n    return l;\n}\n\nconst getKeys=(data)=>{\n    let l=[]\n    for(var i in data){\n        l.push(i)\n    }\n    return l;\n}\nconst min= (a,b)=>{\n    if(a>b)return b;\n    return a;\n}\nconst max= (a,b)=>{\n    if(a<b)return b;\n    return a;\n}\n\n// const keys=getKeys(val.predicted);\n// const actual=getValues(val.actual);\n// const predicted=getValues(val.predicted);\nconsole.log(val.time)\nconst actual=val.actual.data;\nconst predicted=val.predicted.data;\nconst time=val.time;\nconst chartColors = {\n  red: \"rgb(255, 99, 132)\",\n  blue: \"rgb(54, 162, 235)\"\n};\n\nconst color = Chart.helpers.color;\nconst data = {\n  datasets: [\n    {\n        label: \"Actual Stock Value\",\n        backgroundColor: color(chartColors.red)\n          .alpha(0.5)\n          .rgbString(),\n        borderColor: chartColors.red,\n        fill: false,\n        lineTension: 0,\n        borderDash: [8, 4],\n        data: actual\n      },\n      {\n        label: \"Predicted Stock Value\",\n        backgroundColor: color(chartColors.blue)\n          .alpha(0.5)\n          .rgbString(),\n        borderColor: chartColors.blue,\n        fill: false,\n        lineTension: 0,\n        borderDash: [8, 4],\n        data: predicted\n      },\n  ]\n};\n\nconst options = {\n         tooltips: {\n            callbacks: {\n              label: function(tooltipItem) {                \n                var index = tooltipItem.index\n                return tooltipItem.yLabel+\"@Time \"+time[index];\n              }\n            }\n          },\n  elements: {\n    line: {\n      tension: 0.5\n    }\n  },\n  scales:{\n    xAxes: [{\n        type: 'linear',\n        ticks: {\n           min: val.minT,\n           max: val.maxT,\n           minUnit: \"second\",\n           stepSize: 1 //interval between ticks\n        }\n        // ticks: {\n        //     displayFormats: 1,\n        //     maxRotation: 0,\n        //     minRotation: 0,\n        //     stepSize: 1,\n        //     maxTicksLimit: 30,\n        //     minUnit: \"second\",\n        //     source: \"auto\",\n        //     autoSkip: true,\n        // }\n     }]\n  }\n};\n\n  return (\n    <div className=\"graphDisplay\">\n      <Line data={data} options={options} />\n    </div>\n  );\n}\n\nexport default Graph;\n","import React from \"react\";\nimport {useEffect,useState} from \"react\";\nimport Graph from \"./Graph\"\n\nfunction App() {\n    const API=\"https://jsrambz1uf.execute-api.us-west-1.amazonaws.com/default/get-records\";    \n    const Stocks=[\"Google\",\"Tesla\",\"Adobe\",\"Microsoft\",\"Meta\",\"Netflix\",\"Amazon\",\"Oracle\",\"Apple\",\"Nvidia\"]\n    const [stockPrice,setStockPrice]=useState({actual:0,predicted:0});\n    const [name,setName]=useState(null);\n      \n    const filterTheData = (data,len) => {\n          let processed = []\n          let time =[]\n          let max=0\n          let min=100000000\n          let num=0\n          for(let i in data){\n            time.push(i);\n            if(data[i][name]['N']<min){min=data[i][name]['N'];}\n            if(data[i][name]['N']>max){max=data[i][name]['N'];}\n            processed.push({x:num,y:data[i][name]['N']});\n            num++;\n          }\n        //   console.log(moment(num,\"HH:MM:SS\")._i);\n          return {time:time.slice(Math.max(time.length-len,0)),min:min,max:max,data:processed.slice(Math.max(processed.length - len, 0))} ; //returns recent hundred\n    }\n   \n//     const filterTheData = (data) => {\n//         let processed = {}\n//         for(let i in data){\n//             processed[i]=data[i][name]['N'];\n//         }\n//         return processed\n//   }\n \n\n\n    // function reassignName(){\n    //     populateData();\n    //     setTimeout(reassignName, 10000);\n    // }\n    // reassignName();  \n\n    const TIME_MS = 10000;\n\n    useEffect(()=>{\n      const populateData2 = async () => {\n        if(name==null)return;\n        fetch(API)\n       .then(res => res.json())\n       .then(\n         (result) => {\n           var p =filterTheData(result[0],30);\n         \n           var a =filterTheData(result[1],27);\n           \n         //   Removing as they are out of allign ment by one element\n             p.data=p.data.slice(Math.max(p.data.length - 30, 1))\n             a.data.pop()\n             a.time.pop()\n \n         //   p.x=p.x.slice(Math.max(p.length - 99, 0));\n         //   p.y=p.y.slice(Math.max(p.length - 99, 0));\n         //   a.x.pop();\n         //   a.y.pop();\n         \n \n         setStockPrice({actual:a,predicted:p, minT:a.data[0].x-1,maxT:p.data[0].x+30,time:a.time});\n         }\n       ).catch(()=>{\n         console.log(\"API Down\")\n       })\n     }\n        const interval = setInterval(() => {\n            populateData2();\n            console.log(\"Re-reendering graph\")\n        }, TIME_MS);\n        return () => clearInterval(interval);\n    },[])\n\n    useEffect(()=>{\n      const populateData = async () => {\n        if(name==null)return;\n        fetch(API)\n       .then(res => res.json())\n       .then(\n         (result) => {\n           var p =filterTheData(result[0],30,-1);\n         \n           var a =filterTheData(result[1],27);\n           \n         //   Removing as they are out of allign ment by one element\n             p.data=p.data.slice(Math.max(p.data.length - 30))\n             a.data.pop()\n             a.time.pop()\n \n         //   p.x=p.x.slice(Math.max(p.length - 99, 0));\n         //   p.y=p.y.slice(Math.max(p.length - 99, 0));\n         //   a.x.pop();\n         //   a.y.pop();\n         \n \n         setStockPrice({actual:a,predicted:p, minT:a.data[0].x-1,maxT:p.data[0].x+30,time:p.time});\n         }\n       ).catch(()=>{\n         console.log(\"API Down\")\n       })\n     }\n        populateData();\n    },[name])\n    return (\n      <div className=\"App\">\n        {Stocks.map((stockName)=>{\n            return(\n                <button key={stockName} onClick={(e)=>{setName(e.target.value)}} value={stockName.toLowerCase()}>{stockName}</button>\n            )\n        })}\n        <h1>--{name}--</h1>\n        <Graph {...stockPrice}/>\n      </div>\n    );\n  }\n\n\n\n \nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}